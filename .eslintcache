[{"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\index.js":"1","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\App.js":"2","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\reducers\\index.js":"3","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\history.js":"4","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\Header.js":"5","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\reducers\\databaseReducer.js":"6","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\actions\\index.js":"7","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\apis\\database.js":"8","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\HomePage.js":"9","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\DailyMovie.js":"10","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\WhatsNext.js":"11","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\MoviesDisplay.js":"12","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\base.js":"13","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\MoviePage.js":"14","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\SearchPage.js":"15","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\actions\\actionTypes.js":"16","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\movies.js":"17"},{"size":580,"mtime":1607968982925,"results":"18","hashOfConfig":"19"},{"size":997,"mtime":1608064300887,"results":"20","hashOfConfig":"19"},{"size":160,"mtime":1607967500875,"results":"21","hashOfConfig":"19"},{"size":89,"mtime":1607614497335,"results":"22","hashOfConfig":"19"},{"size":1615,"mtime":1608683626976,"results":"23","hashOfConfig":"19"},{"size":1692,"mtime":1608658568952,"results":"24","hashOfConfig":"19"},{"size":1826,"mtime":1608671438480,"results":"25","hashOfConfig":"19"},{"size":109,"mtime":1607637907105,"results":"26","hashOfConfig":"19"},{"size":1424,"mtime":1608657843754,"results":"27","hashOfConfig":"19"},{"size":1983,"mtime":1608672239863,"results":"28","hashOfConfig":"19"},{"size":2870,"mtime":1608585585409,"results":"29","hashOfConfig":"19"},{"size":3823,"mtime":1608658041443,"results":"30","hashOfConfig":"19"},{"size":6888,"mtime":1608670681582,"results":"31","hashOfConfig":"19"},{"size":4588,"mtime":1608670482786,"results":"32","hashOfConfig":"19"},{"size":1406,"mtime":1608671335242,"results":"33","hashOfConfig":"19"},{"size":229,"mtime":1608233767036,"results":"34","hashOfConfig":"19"},{"size":1606,"mtime":1608304137360,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"7812pe",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\index.js",[],["76","77"],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\App.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\reducers\\index.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\history.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\Header.js",["78","79","80"],"import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport history from '../history';\r\n\r\nclass Header extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  handleSearch(event) {\r\n    // event.preventDefault();\r\n    const searchTerm = document.querySelector('.search_fleid').value;\r\n    console.log('Search Term: ' + searchTerm);\r\n    history.push(`/search/${searchTerm}`);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <header>\r\n        <div className=\"row container-header\">\r\n          <div className=\"container-logo\">\r\n            <Link to=\"/\"><img className=\"logo\" src=\"/img/logo.jpg\" alt=\"logo\"/></Link>\r\n            {/* <a href=\"/\"><img className=\"logo\" src=\"/img/logo.jpg\" alt=\"logo\"/></a> */}\r\n          </div>\r\n          <div className=\"container-searchBar\">\r\n            <form className=\"search\" onSubmit={this.handleSearch}>\r\n              <input className=\"search_fleid\" type=\"text\" placeholder=\"Search Movies\"/>\r\n              <a className=\"btn_search\" onClick={this.handleSearch}><i className=\"fa fa-search\"></i></a>\r\n            </form>\r\n          </div>\r\n          <div className=\"container-favorites\">\r\n            <div className=\"container-btn-favorites\">\r\n              <a className=\"btn-favorites\" href=\"#\">\r\n                <i className=\"fa fa-sort-desc\"></i>\r\n                <p>FAVORITES</p>\r\n              </a>\r\n            </div>\r\n            <div className=\"favorite-panel\">\r\n              <ul className=\"favorite-list\">\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\reducers\\databaseReducer.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\actions\\index.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\apis\\database.js",[],["81","82"],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\HomePage.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\DailyMovie.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\WhatsNext.js",["83"],"import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport {addMoviesToState, addFavoriteToState, deleteFavoriteFromState} from '../../../actions';\r\nimport * as Helper from '../../base';\r\n\r\nclass WhatsNext extends React.Component {\r\n  componentDidMount(){\r\n    if(!this.props.whatsNext) this.props.addMoviesToState('whatsNext', this.props.movies);\r\n  }\r\n\r\n  handleFavorite(sectionKey, movie, event) {\r\n    const isFavored = Helper.isFavorite(event);\r\n    if(isFavored) {\r\n      this.props.addFavoriteToState(movie);\r\n      Helper.displayFavoriteToList(sectionKey, event, movie, this.removeFavorite.bind(this));\r\n      Helper.toggleFavorite(event);\r\n    }else {\r\n      this.removeFavorite(event, movie);\r\n    }\r\n  }\r\n\r\n   removeFavorite(event, movie) {\r\n    this.props.deleteFavoriteFromState(movie);\r\n    Helper.removeDisplayedFavorite(movie);\r\n    Helper.toggleFavorite(event);\r\n  }\r\n\r\n  displayNextMovies() {\r\n    return this.props.whatsNext.map(nextMovie => {\r\n      return(\r\n        <div className=\"movieID whatsNext\" key={nextMovie.id} movieid={nextMovie.id}>\r\n         <div className=\"container-movie-title\">\r\n           <div className=\"next-poster poster\">\r\n             <img src={`https://image.tmdb.org/t/p/original${nextMovie.poster_path}`} alt={nextMovie.title}/>\r\n              <Link to={`/movie/${nextMovie.id}`}><span className=\"highlight\"></span></Link>\r\n              <a className=\"favorite\"\r\n                 onClick={(event) => this.handleFavorite('whatsNext', nextMovie, event)}>\r\n                 <i className=\"fa fa-star-o\"></i>\r\n              </a>\r\n           </div>\r\n           <div className=\"container-next-description\">\r\n             <div className=\"next-description\">\r\n              <h3>{nextMovie.title}</h3>\r\n              <p>{Helper.displayTagline(nextMovie.tagline)}</p>\r\n              <div>\r\n               <p>\r\n                 {Helper.displayStars(nextMovie.vote_average)}\r\n                 ({nextMovie.vote_count})\r\n               </p>\r\n              </div>\r\n             </div>\r\n           </div>\r\n         </div>\r\n        </div>\r\n      );\r\n     });\r\n  }\r\n\r\n  render(){\r\n    if(!this.props.whatsNext) {\r\n      return(\r\n        <div className=\"movieID next-movies\">\r\n          <div className=\"loading\"></div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div>\r\n          {this.displayNextMovies()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  // console.log('Map State: ', state);\r\n  // console.log('Map State database: ', state.database);\r\n  // console.log('Map State WhatsNext: ', state.database.whatsNext);\r\n  return{\r\n    database: state.database,\r\n    whatsNext: state.database.whatsNext\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {addMoviesToState, addFavoriteToState, deleteFavoriteFromState})(WhatsNext);\r\n","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\Home\\MoviesDisplay.js",["84","85","86","87"],"import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport {addMoviesToState, addFavoriteToState, deleteFavoriteFromState} from '../../../actions';\r\nimport * as Helper from '../../base';\r\nimport {displayStars, displayTitle, turnToClass} from '../../base';\r\n\r\nclass MoviesDisplay extends React.Component {\r\n\r\n  componentDidMount(){\r\n    if(!this.props.moviesDisplay && this.props.movieList){\r\n      this.props.addMoviesToState(nameToCategory(this.props.sectionName), this.props.movieList);\r\n    } else if(!this.props.searchMovie){\r\n      // console.log('DID NOT REDISPLAY');\r\n    }\r\n  }\r\n\r\n  //sectionKey, movie,\r\n  handleFavorite(sectionName, movie, event) {\r\n    const isFavored = Helper.isFavorite(event);\r\n    if(isFavored) {\r\n      this.props.addFavoriteToState(movie);\r\n      Helper.displayFavoriteToList(sectionName, event, movie, this.removeFavorite.bind(this));\r\n      Helper.toggleFavorite(event);\r\n    }else {\r\n      this.removeFavorite(event, movie);\r\n    }\r\n  }\r\n\r\n   removeFavorite(event, movie) {\r\n    this.props.deleteFavoriteFromState(movie);\r\n    Helper.removeDisplayedFavorite(movie);\r\n    Helper.toggleFavorite(event);\r\n  }\r\n\r\n  displayList(sectionName, movies) {\r\n    // console.log('Funny : ', this.props.moviesDisplay);\r\n\r\n    return movies.map(movie => {\r\n      return(\r\n        <div className={`container-list-movie movieID ${sectionName}`} key={movie.id} movieid={movie.id}>\r\n         <div className=\"movie-poster-container\">\r\n           <div className=\"display-movie-poster poster\">\r\n             {(movie.poster_path) ?\r\n               <img src={`https://image.tmdb.org/t/p/original${movie.poster_path}`} alt={movie.title}/> :\r\n               <h2 className=\"no-poster\">{Helper.displayTitle(movie.title)}</h2>\r\n             }\r\n            <Link to={`/movie/${movie.id}`}><span className=\"highlight\"></span></Link>\r\n            <a className=\"favorite\"\r\n               onClick={(event) => this.handleFavorite(sectionName, movie, event)}>\r\n              <i className=\"fa fa-star-o\"></i></a>\r\n           </div>\r\n            <div className=\"display-poster-description\">\r\n              <h4>{Helper.displayTitle(movie.title)}</h4>\r\n              <p>Runtime: {(movie.runtime) ? movie.runtime + 'm' : ' ?'}</p>\r\n              <div>\r\n                <p>\r\n                  {Helper.displayStars(movie.vote_average)}\r\n                  ({movie.vote_count})\r\n                </p>\r\n             </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    if(!this.props.moviesDisplay && !this.props.searchMovie) {\r\n      return(\r\n        <div className=\"section-movies\">\r\n          <div className=\"loading\"></div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div className=\"section-movies\">\r\n          {(this.props.displayTitle) ?\r\n            <div>\r\n              <h2>{this.props.sectionName}</h2>\r\n            </div>\r\n          : ``}\r\n          <div className={`row container-movies ${this.props.sectionName}`}>\r\n            {this.displayList(this.props.sectionName, (this.props.moviesDisplay) ? this.props.moviesDisplay : this.props.searchMovie)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst nameToCategory = (name) => {\r\n  return name.replace(' ', '');\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // console.log('Map State: ', state);\r\n  // console.log('Map State database: ', state.database);\r\n  // console.log('Map State Funny: ', state.database[nameToCategory(ownProps.sectionName)]);\r\n  return{\r\n    moviesDisplay: state.database[nameToCategory(ownProps.sectionName)],\r\n    searchMovie: state.database.searchDisplay\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {addMoviesToState, addFavoriteToState, deleteFavoriteFromState})(MoviesDisplay);\r\n","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\base.js",["88","89"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// shortens the title to be display to a limited number\r\n// title -  title to shorten\r\n// limit - how long the title can be\r\nexport const displayTitle = (title, limit = 16) => {\r\n  var newTitle = '';\r\n\r\n  // make a list of each word and add to a string as long as that string is below the limit\r\n  title.split(' ').reduce((total, word) => {\r\n    if(total === 0) {\r\n      newTitle = word;\r\n    } else if(word === '-') {\r\n      // - means that there are multiple titles within that title\r\n      // just display the first one\r\n      total = limit;\r\n    } else if((total + word.length) < limit) {\r\n      newTitle += ' ' + word;\r\n    }\r\n\r\n    // +1 for the space between words\r\n    return total + word.length + 1;\r\n  }, 0);\r\n\r\n  return (title.length > limit) ? newTitle + '...' : newTitle;\r\n}\r\n\r\n// adds a style sheet to HTML document\r\n// sheetName - name of style sheet\r\nexport const addStyleSheet = (sheetName) => {\r\n  const headContainer = document.querySelector('head');\r\n  const link = document.createElement(`link`);\r\n  link.className = \"extra-sheet\";\r\n  link.rel = \"stylesheet\";\r\n  link.type = \"text/css\";\r\n  link.href = `/${sheetName}.css`;\r\n  headContainer.append(link);\r\n}\r\n\r\n// display the trailer of the movie that was passed\r\n// if no trailer is given then just the title of the movie will be displayed\r\n// - movie: movie that contains a trailer\r\nexport const displayVideo = (movie) => {\r\n  const videos = movie.videos.results;\r\n  return(\r\n      <div className=\"container-trailer\">\r\n        {(videos.length > 0) ?\r\n        <iframe className=\"trailer\" title=\"movie trailer\" src={`https://www.youtube.com/embed/${videos[0].key}`}></iframe> :\r\n        <h2 className=\"no-poster\">{this.props.dailyMovie.title}</h2>}\r\n      </div>\r\n  );\r\n}\r\n\r\n// display the poster, title, rating, and tagline of a movie\r\n// clicking on the poster will take user to the movie page\r\n// - movie: movie containing the information to be displayed\r\n// - callback: handles what happens when star on poster is clicked\r\n// - extraHTML: anything that needs to be displayed within the container but after this information above\r\nexport const displayBanner = (movie, extraHTML, callback) => {\r\n  // onClick={(event) => this.handleFavorite('whatsNext', nextMovie, event)}>\r\n  return(\r\n    <div className=\"container-movie-details movieID daily-movie\" movieid={movie.id}>\r\n      <div className=\"container-movie-title\">\r\n        <div className=\"container-poster poster\">\r\n          <img src={`https://image.tmdb.org/t/p/original${movie.poster_path}`} alt={movie.title}/>\r\n          <Link to={`/movie/${movie.id}`}><span className=\"highlight\"></span></Link>\r\n          <a className=\"favorite\"\r\n             onClick={(event) => callback(movie, event)}>\r\n            <i className=\"fa fa-star-o\"></i>\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"container-movie-description\">\r\n          <div className=\"movie-description\">\r\n           <h1>{movie.title}</h1>\r\n            <div>\r\n              <h3>\r\n                {displayStars(movie.vote_average)}\r\n                <p>({movie.vote_count})</p>\r\n              </h3>\r\n            </div>\r\n            <h3>{displayTagline(movie.tagline)}</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {extraHTML}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Takes a ranking from 0 - 10 and displays it as a 0 - 5 star ranking system\r\n// averageStars - number between 0 - 10\r\n export const displayStars = (averageStars) => {\r\n  var maxStars = 5;\r\n  var markup = [];\r\n  const stars = Math.floor(averageStars) / 2;\r\n  let countKey = 0;\r\n\r\n  // add a filled in star\r\n  for(var i = 0; i < Math.floor(stars); i++){\r\n    markup.push(<i className=\"fa fa-star\" key={countKey}></i>);\r\n    countKey++;\r\n  }\r\n  // if there is a remainder of stars add half star\r\n  if(Math.floor(averageStars) % 2 > 0) {\r\n    markup.push(<i className=\"fa fa-star-half-o\" key={countKey}></i>);\r\n    countKey++;\r\n    maxStars--;\r\n  }\r\n  // if there is less stars than 5 add empty star for each one that is missing\r\n  for(var j = 0; j < maxStars - stars; j++){\r\n    markup.push(<i className=\"fa fa-star-o\" key={countKey}></i>);\r\n    countKey++;\r\n  }\r\n\r\n  return markup;\r\n }\r\n\r\n// remove any punctuation within string\r\n// tagline - tagline of the movie\r\nexport const displayTagline = (tagline) => {\r\n  return tagline.replace(/[^\\w\\s]|_/g, \"\");\r\n}\r\n\r\n// toggles the star on the poster of the movie that was passed\r\n// event - event that called this function\r\n// return - if the movie is currently favored\r\nexport const isFavorite = (event) => {\r\n  let element = event.target;\r\n  if(element.matches('a')) {\r\n    element = element.firstChild;\r\n  }\r\n\r\n  return element.getAttribute('class').includes('fa-star-o');\r\n}\r\n\r\n// toggles the star on the poster of the movie that was passed\r\n// event - event that called this function\r\n// return - if the movie is currently favored\r\nexport const toggleFavorite = (event) => {\r\n  let element = (event.target) ? event.target : event;\r\n  if(element.matches('a')) {\r\n    element = element.firstChild;\r\n  }\r\n\r\n  const starNotFilled = element.getAttribute('class').includes('fa-star-o');\r\n  element.setAttribute('class', `${starNotFilled ? 'fa fa-star star-fill' : 'fa fa-star-o'}`);\r\n\r\n}\r\n\r\n//\r\n// SectionKey - the list the movie belongs to from the state\r\n// event - event that fired off this action\r\n// movie - the movie that is being favored\r\n// callback - function to call when the X is clicked\r\nexport const displayFavoriteToList = (sectionKey, event, movie, callback) => {\r\n  const markup = `\r\n    <li>\r\n      <a class=\"favorited-item ${sectionKey}\" movieid=\"${movie.id}\">\r\n        ${(movie.poster_path) ? `<img src=\"https://image.tmdb.org/t/p/original${movie.poster_path}\" alt=\"${movie.title} poster\"/>` : ''}\r\n        <h4>${movie.title}</h4>\r\n        <div class=\"highlight\">\r\n          <span class=\"btn-remove\"><i class=\"fa fa-times\"></i></span>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  `;\r\n\r\n  // just add a click listener if you have to\r\n  document.querySelector('.favorite-list').insertAdjacentHTML('beforeend', markup);\r\n  const clickRemove = document.querySelector(`.${sectionKey} .btn-remove`);\r\n  clickRemove.addEventListener('click', () => {callback(event, movie)}, false);\r\n}\r\n\r\n// Removes the movie from being displayed in the favorite list\r\n// movie - movie that is being removed\r\nexport const removeDisplayedFavorite = (movie) => {\r\n  const target = document.querySelector(`.favorited-item[movieID=\"${movie.id}\"]`);\r\n  if(target) target.parentNode.remove(target);\r\n}\r\n\r\nexport const checkFavoriteOnLoad = (movies) => {\r\n  console.log('Movies: ', movies);\r\n  movies.forEach(movie => {\r\n    const target = document.querySelector(`[movieID=\"${movie.id}\"] .favorite i`);\r\n    console.log('Target: ', target);\r\n    if(target) toggleFavorite(target);\r\n  });\r\n}\r\n","C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\MoviePage.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\pages\\SearchPage.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\actions\\actionTypes.js",[],"C:\\Users\\malot\\OneDrive\\Desktop\\Job\\Website Practice\\movie-database\\movie-database-react\\client\\src\\components\\movies.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":6,"column":3,"nodeType":"96","messageId":"97","endLine":8,"endColumn":4},{"ruleId":"98","severity":1,"message":"99","line":28,"column":15,"nodeType":"100","endLine":28,"endColumn":69},{"ruleId":"98","severity":1,"message":"101","line":33,"column":15,"nodeType":"100","endLine":33,"endColumn":53},{"ruleId":"90","replacedBy":"102"},{"ruleId":"92","replacedBy":"103"},{"ruleId":"98","severity":1,"message":"99","line":37,"column":15,"nodeType":"100","endLine":38,"endColumn":90},{"ruleId":"104","severity":1,"message":"105","line":6,"column":9,"nodeType":"106","messageId":"107","endLine":6,"endColumn":21},{"ruleId":"104","severity":1,"message":"108","line":6,"column":23,"nodeType":"106","messageId":"107","endLine":6,"endColumn":35},{"ruleId":"104","severity":1,"message":"109","line":6,"column":37,"nodeType":"106","messageId":"107","endLine":6,"endColumn":48},{"ruleId":"98","severity":1,"message":"99","line":49,"column":13,"nodeType":"100","endLine":50,"endColumn":84},{"ruleId":"104","severity":1,"message":"110","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":69,"column":11,"nodeType":"100","endLine":70,"endColumn":58},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["111"],["112"],"no-unused-vars","'displayStars' is defined but never used.","Identifier","unusedVar","'displayTitle' is defined but never used.","'turnToClass' is defined but never used.","'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation"]